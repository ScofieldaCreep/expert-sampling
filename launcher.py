import base64
import os
import sys
import tempfile
from pathlib import Path

# 在构建时由脚本替换为真实Base64内容
APP_CODE_B64 = ""


def write_app_to_temp() -> str:
    if APP_CODE_B64 and APP_CODE_B64 != "":
        code_bytes = base64.b64decode(APP_CODE_B64.encode("utf-8"))
        temp_dir = tempfile.mkdtemp(prefix="expert_sampler_")
        app_path = os.path.join(temp_dir, "app.py")
        with open(app_path, "wb") as f:
            f.write(code_bytes)
        return app_path

    # 兜底：若未替换Base64，则尝试查找同目录 app.py
    here = Path(getattr(sys, "_MEIPASS", Path(__file__).parent))
    candidate = here / "app.py"
    if candidate.exists():
        return str(candidate)
    raise RuntimeError("app.py 不存在，且未提供内嵌代码。")


def main() -> None:
    app_path = write_app_to_temp()
    try:
        # 直接使用 Streamlit 内部引导，避免依赖外部 CLI
        from streamlit.web import bootstrap
        bootstrap.run(app_path, "", [], {})
    except Exception:
        # 兜底：使用子进程方式
        import subprocess
        subprocess.run([sys.executable, "-m", "streamlit", "run", app_path], check=True)


if __name__ == "__main__":
    main()
